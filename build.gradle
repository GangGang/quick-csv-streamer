apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'uk.elementarysoftware'
version = '0.1.2-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8


buildscript {
    repositories {
        maven {
            name 'Shadow'
            url 'http://dl.bintray.com/content/gvsmirnov/gradle-plugins'
        }
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8.1'
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    perf
}

dependencies {	
    testCompile group: 'commons-io', name: 'commons-io', version: '2.4'
    testCompile group: 'junit', name: 'junit', version: '4.11'

	def jmhVersion = '1.5'
    perfCompile project
    perfCompile "commons-io:commons-io:2.4"
    perfCompile "org.openjdk.jmh:jmh-core:$jmhVersion"
    perfCompile "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
    perfCompile "net.sf.opencsv:opencsv:2.3"
}

apply plugin: "eclipse"
eclipse {
    classpath {
        plusConfigurations += [ configurations.perfCompile ]
    }
}

eclipse.classpath.file {
    whenMerged  { classpath ->
        classpath.entries.removeAll { entry -> entry.kind == 'src' && entry.path.startsWith("/") }
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task perfJar(type: Jar, dependsOn: perfClasses) {
    from sourceSets.perf.output + sourceSets.main.output
}

task benchJar(dependsOn: perfJar) {

    apply plugin: "shadow"

    shadow {
        classifier = "benchmarks"
        includeDependenciesFor = ["runtime", "perfRuntime"]

        transformer(com.github.jengelman.gradle.plugins.shadow.transformers.ManifestResourceTransformer) {
            mainClass = "org.openjdk.jmh.Main"
        }
    }

    doLast {
        shadowJar.execute(
)    }
}

task bench(type:Exec, dependsOn: benchJar) {
	commandLine 'java', '-Xmx1g', '-XX:+AggressiveOpts', '-jar', "$buildDir.path/distributions/$rootProject.name-$version-benchmarks.jar"
	if(project.hasProperty("jmh")){
        args jmh
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

if (hasProperty('ossrhUsername')) {
	
	signing {
	    sign configurations.archives
	}

	uploadArchives {
	  repositories {
	    mavenDeployer {
	      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

	      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
	        authentication(userName: ossrhUsername, password: ossrhPassword)
	      }

	      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
	        authentication(userName: ossrhUsername, password: ossrhPassword)
	      }

	      pom.project {
	        name 'Quick CSV Streamer'
	        packaging 'jar'
	        description 'Quick CSV Parser with Java 8 Streams API'
	        url 'https://github.com/titorenko/quick-csv-streamer'

	        scm {
	          connection 'scm:git:git://github.com/titorenko/quick-csv-streamer.git'
	          developerConnection 'scm:git:git@github.com:titorenko/quick-csv-streamer.git'
	          url 'https://github.com/titorenko/quick-csv-streamer'
	        }

	        licenses {
	          license {
	            name 'GNU General Public License, version 2'
	            url 'http://www.gnu.org/licenses/gpl-2.0.html'
	          }
	        }

	        developers {
	          developer {
	            id 'elementarysoftware'
	            name 'Elementary Software Ltd.'
	            email 'elementarysoftware@gmail.com'
	          }
	        }
	      }
	    }
	  }
	}
}